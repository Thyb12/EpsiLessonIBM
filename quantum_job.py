import os
from qiskit_ibm_runtime import QiskitRuntimeService, Estimator, Session
from qiskit import QuantumCircuit
from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager
from qiskit.quantum_info import SparsePauliOp
import os

# ğŸ”¹ VÃ©rifier que la clÃ© API est bien dÃ©finie
TOKEN = os.getenv("IBM_QUANTUM_API_KEY")
if not TOKEN:
    raise ValueError("Erreur : la clÃ© API IBM Quantum est absente. VÃ©rifiez que IBM_QUANTUM_API_KEY est bien dÃ©fini dans les Secrets GitHub.")

# ğŸ”¹ Authentifier le service avec la clÃ© API
QiskitRuntimeService.save_account(token=TOKEN, channel="ibm_quantum")
service = QiskitRuntimeService()

# ğŸ”¹ SÃ©lectionner le backend le moins occupÃ©
backend = service.least_busy(simulator=False, operational=True)
print(f"Backend sÃ©lectionnÃ© : {backend.name}")

# ğŸ”¹ CrÃ©er un circuit quantique simple
qc = QuantumCircuit(2, 2)
qc.h(0)
qc.cx(0, 1)
qc.measure([0, 1], [0, 1])

# ğŸ”¹ Convertir en circuit ISA
pm = generate_preset_pass_manager(backend=backend, optimization_level=1)
isa_circuit = pm.run(qc)

# ğŸ”¹ Ouvrir une session pour exÃ©cuter le job
with Session(service=service, backend=backend) as session:
    # ğŸ”¹ Construire l'estimateur avec la session
    estimator = Estimator(session=session)

    # ğŸ”¹ DÃ©finir les options d'exÃ©cution
    estimator.options.resilience_level = 1
    estimator.options.default_shots = 5000

    # ğŸ”¹ Mapper les observables
    observables_labels = ["ZZ", "XX", "YY"]
    observables = [SparsePauliOp(label) for label in observables_labels]
    mapped_observables = [obs.apply_layout(isa_circuit.layout) for obs in observables]

    # ğŸ”¹ ExÃ©cuter le job
    job = estimator.run([(isa_circuit, mapped_observables)])

    # ğŸ”¹ Afficher l'ID du job
    print(f">>> Job ID: {job.job_id()}")

    # ğŸ”¹ Attendre et afficher les rÃ©sultats
    result = job.result()
    print("RÃ©sultats :", result)
